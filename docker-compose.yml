version: '3.4'

services:

  movies_admin:
    build: services/movies_admin
    container_name: movies_admin
    restart: on-failure
    env_file: docker-compose-env/movies-admin.env
    volumes:
      - movies-admin-static:/opt/app/static/movies

  nginx:
    build: services/nginx
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - movies-admin-static:/src/static/movies-admin
      - notify-admin-static:/src/static/notify-admin
      - billing-admin-static:/src/static/billing-admin
      - ~/graduate_work/crt/:/etc/ssl/certs

  movies_films_etl:
    build: services/etl
    container_name: movies_films_etl
    restart: on-failure
    environment:
      - MODE_ETL=FILMWORK_ETL
    env_file: docker-compose-env/movies-etl.env

  movies_persons_etl:
    build: services/etl
    container_name: movies_persons_etl
    restart: on-failure
    environment:
      - MODE_ETL=PERSON_ETL
    env_file: docker-compose-env/movies-etl.env

  movies_genres_etl:
    build: services/etl
    container_name: movies_genres_etl
    restart: on-failure
    environment:
      - MODE_ETL=GENRE_ETL
    env_file: docker-compose-env/movies-etl.env

  movies_async_api:
    build: services/async_api
    container_name: movies_async_api
    restart: on-failure
    env_file: docker-compose-env/async-api.env

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - movies-elastic-data:/usr/share/elasticsearch/data

  redis:
    image: "redis:alpine"
    container_name: redis
    restart: always
    volumes:
      - redis-data:/data

  redis-auth:
    image: "redis:alpine"
    container_name: redis-auth
    restart: always
    volumes:
      - redis-auth:/data

  movies_auth:
    build: services/auth_service
    container_name: movies_auth
    restart: on-failure
    environment:
      - FIRST_START=1
    env_file: docker-compose-env/movies-auth.env

  notify_admin:
    build: services/notify_admin
    container_name: notify_admin
    restart: on-failure
    volumes:
      - notify-admin-static:/var/app/static/notify-admin
    env_file: docker-compose-env/notify_admin.env

  notify_api:
    build: services/notify_api
    container_name: notify_api
    restart: on-failure
    env_file: docker-compose-env/notify_admin.env
    depends_on:
      - rabbitmq

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  rabbitmq:
    build: services/rabbit_docker
    container_name: rabbitmq
    restart: "always"

  notify_admin_celery_worker:
    image: notify_admin
    hostname: celery_worker
    restart: "always"
    command:
      - celery
      - -A
      - config
      - worker
      - -P
      - prefork
      - -c
      - "1"
      - -l
      - INFO
    entrypoint: ""
    environment:
      PYTHONPATH: "."
    env_file: docker-compose-env/notify_admin.env
    depends_on:
      - rabbitmq
      - notify_api

  notify_admin_celery_beat:
    image: notify_admin
    hostname: celery_beat
    restart: "always"
    command:
      - celery
      - -A
      - config
      - beat
      - -l
      - INFO
    entrypoint: ""
    environment:
      PYTHONPATH: "."
    env_file: docker-compose-env/notify_admin.env
    depends_on:
      - rabbitmq
      - notify_api

  notify_worker_fast:
    build: services/notify_worker
    environment:
      MQ_QUEUE: "movies.q.notify_fast"
    restart: on-failure
    env_file: docker-compose-env/notify_admin.env
    depends_on:
      - rabbitmq
    deploy:
      replicas: 1

  notify_worker_slow:
    build: services/notify_worker
    environment:
      MQ_QUEUE: "movies.q.notify_slow"
    restart: on-failure
    env_file: docker-compose-env/notify_admin.env
    depends_on:
      - rabbitmq
    deploy:
      replicas: 2

  billing_admin:
    build: services/billing_admin
    image: billing_admin
    container_name: billing_admin
    restart: on-failure
    volumes:
      - billing-admin-static:/var/app/billing/static/billing-admin
    env_file: docker-compose-env/billing_admin.env

  billing_admin_celery_worker:
    image: billing_admin
    restart: "always"
    command:
      - celery
      - -A
      - billing.config
      - worker
      - -P
      - prefork
      - -c
      - "1"
      - -Q
      - low,default,high
      - -l
      - INFO
    entrypoint: ""
    environment:
      PYTHONPATH: "."
    env_file: docker-compose-env/billing_admin.env
    depends_on:
      - billing_admin

  billing_admin_celery_beat:
    image: billing_admin
    restart: "always"
    command:
      - celery
      - -A
      - billing.config
      - beat
      - -l
      - INFO
    entrypoint: ""
    environment:
      PYTHONPATH: "."
    env_file: docker-compose-env/billing_admin.env
    depends_on:
      - billing_admin

  selenium_test:
    build: services/selenium_test
    container_name: selenium_test
    env_file: docker-compose-env/billing_admin.env
    restart: "no"

  allure:
    container_name: allure
    image: "frankescobar/allure-docker-service:2.13.4"
    environment:
      CHECK_RESULTS_EVERY_SECONDS: 3
      KEEP_HISTORY: "TRUE"
      KEEP_HISTORY_LATEST: 5
    ports:
    - "5050:5050"

volumes:
  movies-admin-static:
    driver: local
  notify-admin-static:
    driver: local
  billing-admin-static:
    driver: local
  movies-elastic-data:
    driver: local
  redis-data:
    driver: local
  redis-auth:
    driver: local
